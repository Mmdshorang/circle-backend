generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}

enum UserRole {
  MEMBER
  ADMIN
  GUEST
}

// Status table for issues and projects
model Status {
  id     String  @id @default(uuid())
  name   String
  color  String
  icon   String?    
  issues Issue[]
  projects Project[]
  inboxItems InboxItem[]
}

// Health table برای Project
model Health {
  id          String  @id
  name        String
  color       String
  description String
  projects    Project[]
}

// User table
model User {
  id          String   @id @default(uuid())
  name        String
  avatarUrl   String?
  email       String   @unique
  status      UserStatus @default(ONLINE)
  role        UserRole   @default(MEMBER)
  joinedDate  DateTime   @default(now())
  memberships Member[]
  leads       Project[]  @relation("ProjectLead")
  assigneeIssues Issue[]

  // ✅ اینا رو اضافه کن
  assignedInboxItems InboxItem[] @relation("InboxItemAssignee")
  createdInboxItems  InboxItem[] @relation("InboxItemUser")

}

// Team table
model Team {
  id        String   @id @default(uuid())
  name      String
  icon      String?
  joined    Boolean  @default(false)
  color     String?
  members   Member[]
  projects  Project[] @relation("ProjectTeams")
  cycles    Cycle[]

  @@unique([name])
}



// Member: many-to-many بین User و Team
model Member {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  team    Team     @relation(fields: [teamId], references: [id])
  teamId  String
}

// Project
model Project {
  id              String   @id @default(uuid())
  name            String
  status          Status   @relation(fields: [statusId], references: [id])
  statusId        String
  icon            String?
  percentComplete Float
  startDate       DateTime
  lead            User     @relation("ProjectLead", fields: [leadId], references: [id])
  leadId          String
  priority        Priority @default(MEDIUM)
  health          Health   @relation(fields: [healthId], references: [id])
  healthId        String
  teams           Team[]   @relation("ProjectTeams")
  issues          Issue[]
   inboxItems      InboxItem[] 

  @@unique([name])
}

// Label
model Label {
  id     String  @id @default(uuid())
  name   String
  color  String
  issues Issue[] @relation("IssueLabels")
  inboxItems  InboxItem[]  @relation("InboxLabels")
}


// Issue
model Issue {
  id          String   @id @default(uuid())
  identifier  String   @unique
  title       String
  description String?
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    String
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
  priority    Priority @default(MEDIUM)
  labels      Label[]  @relation("IssueLabels")
  createdAt   DateTime @default(now())
  
  cycle       Cycle?   @relation(fields: [cycleId], references: [id])
  cycleId     String?

  project Project? @relation(fields: [projectId], references: [id])
  projectId String?


  parent      Issue?    @relation("IssueSubissues", fields: [parentId], references: [id])
  parentId    String?
  subissues   Issue[]   @relation("IssueSubissues")

  rank        String
  dueDate     DateTime?
}

// Cycle (Sprint)
model Cycle {
  id        String   @id @default(uuid())
  number    Int
  name      String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  startDate DateTime
  endDate   DateTime
  progress  Float
  issues    Issue[]

  @@index([teamId])
}

// InboxItem / Notification
enum NotificationType {
  COMMENT
  MENTION
  ASSIGNMENT
  STATUS
  REOPENED
  CLOSED
  EDITED
  CREATED
  UPLOAD
}

model InboxItem {
  id          String   @id @default(uuid())
  identifier  String
  title       String
  description String
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    String

  // ✅ این دوتا باید relation name جدا داشته باشن
  assignee    User?    @relation("InboxItemAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?

  user        User     @relation("InboxItemUser", fields: [userId], references: [id])
  userId      String

  priority    Priority @default(MEDIUM)
  labels Label[] @relation("InboxLabels")


  createdAt   DateTime @default(now())
  cycleId     String
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
  subissues   String[]
  dueDate     DateTime?
  content     String
  type        NotificationType
  timestamp   DateTime @default(now())
  read        Boolean  @default(false)
}

// (Workspace removed)
